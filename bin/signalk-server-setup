#!/bin/bash

sysddir="/etc/systemd/system"
systemd="$sysddir/signalk.service"
socket="$sysddir/signalk.socket"

which systemctl > /dev/null 2>&1
noSystemCtl=$?

which dialog > /dev/null 2>&1
noDialog=$?

backtitle="Signal K Node Server Setup"
aspect=20

tempfile=`(tempfile) 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 $SIG_NONE $SIG_HUP $SIG_INT $SIG_QUIT $SIG_TERM

function askYesNo()
{
  msg=$1
  default=$2
  if [ $noDialog == 1 ]; then
    if [ "$default" == 1 ]; then prompt="[Y/n]"; else prompt="[y/N]"; fi
    echo -ne "$msg? $prompt "
    read ans
    echo
    case $ans in
      y|Y)
        return 1;;
      n|N)
        return 0;;
      *)
        return $default
    esac
  else
    defaultno=""
    if [ $default == 0 ]; then defaultno="--defaultno"; fi
    dialog --backtitle "$backtitle" --aspect $aspect $defaultno --yesno "$msg?" 0 0
    if [ $? == 0 ]; then return 1; else return 0; fi
  fi
}

function textInput()
{
  msg=$1
  default=$2
  if [ $noDialog == 1 ]; then
    defaultstr=""
    if [ "$default" != "" ]; then defaultstr="[$default]"; fi
    echo -ne "$msg $defaultstr: "
    read ans
    if [ "$ans" == "" ]; then ans=$default; fi
    eval "$3='$ans'"
    echo
    res=0
  else
    dialog --backtitle "$backtitle" --aspect $aspect --inputbox "$msg" 0 0 $default 2> $tempfile
    res=$?
    text=`cat $tempfile`
    eval "$3='$text'"
  fi
  if [ $res != 0 ]; then exit 1; fi
}

function message()
{
  msg=$1
  if [ $noDialog == 1 ]; then
    echo -e "$msg\n"
  else
    dialog --backtitle "$backtitle" --aspect $aspect --msgbox "$msg" 0 0
  fi
}

if [ $EUID -gt 0 ]; then
  if [  $noSystemCtl == 0 ];then
    askYesNo "Please run as root if you want this server configuration to run at every startup, type: \n\"sudo $0\"\n\nAre you sure you want to continue" 0
    
    if [ $? == 0 ]; then exit 1; fi
 
  fi
  defaultConfigLocation="$HOME/.signalk"
else
  message "YOU ARE LOGGED IN AS $SUDO_USER AND THE SERVER WILL BE STARTED AS THIS USER"
  defaultConfigLocation=`eval echo ~$SUDO_USER`/.signalk
fi


textInput "Enter the location to store server configuration" $defaultConfigLocation configDirectory

if [ "$configDirectory" == "" ]; then
  configDirectory=$defaultConfigLocation
fi

if [ -d $configDirectory ]; then
  askYesNo "AN EXISTING CONFIGURAION WAS FOUND\n\nARE YOU SURE YOU WANT TO DELETE THE EXISTING CONFIGURATION AND SET UP A NEW STARTUP SERVICE" 0
  if [ $? == 0 ]; then exit 1; fi
fi

textInput "Enter your vessel name" "" vesselName
vesselName=${vesselName// /_}
textInput "Enter your mmsi if you have one" "" vesselMMSI

if [ $EUID == 0 ]; then
  askYesNo "Signal K default port is 3000\nPort 80 does not require \":3000\" in browser and app interfaces\n\nDo you want Signal K to change to port 80"

  if [ $? == 0 ]; then
    port=3000
    url="http://localhost:3000"
  else
    port=80
    url="http://localhost"
  fi
else
  url="http://localhost:3000"
  port=3000
fi

askYesNo "Do you want to enable SSL" 1
if [ $? == 0 ]; then
  ssl="false"
else
    ssl="true"
fi

if [ $ssl == "true" ]; then
  if [ $port == 80 ]; then
    primaryPort=443
    secondaryPort=80
  else
    primaryPort=3443
    secondaryPort=3000
  fi
else
  primaryPort=$port
fi

if [ "$vesselMMSI" == "" ]; then
  UUIDFile="$configDirectory/UUID"
  if [ -f $UUIDFile ]
  then
    UUID=$( cat $UUIDFile)
    echo "UUID=$UUID"
  else
    UUID=$( cat /proc/sys/kernel/random/uuid)
    echo $UUID > $UUIDFile
    echo "UUID generated: $UUID"
  fi
  vesselID="\"uuid\": \"urn:mrn:signalk:uuid:$UUID\""
else
  vesselID="\"mmsi\": \"$vesselMMSI\""
fi

askYesNo "You have chosen the following settings:\n\nConfiguration Directory: $configDirectory\nVessel Name: $vesselName\nMMSI: $vesselMMSI\nPort: $port\nSSL: $ssl\n\nAre you sure you want to continue" 1
if [ $? == 0 ]; then exit 1; fi

if [ ! -d "$configDirectory" ]; then
  mkdir -p "$configDirectory"
fi

vesselBash="$configDirectory/signalk-server"
vesselJson="$configDirectory/settings.json"
vesselDefaults="$configDirectory/defaults.json"
packageJson="$configDirectory/package.json"

message "Creating your server settings at $vesselJson"
thisDirName="$( cd "$( dirname "$0" )" && pwd )"
cat > $vesselBash <<bashScript
#!/bin/sh
${thisDirName}/signalk-server -c $configDirectory \$*
bashScript

chmod 755 $vesselBash

message "Creating your vessel settings at $vesselDefaults"
cat > $vesselDefaults <<EOF
{
  "vessels": {
    "self": {
      "name": "$vesselName",
      $vesselID
    }
  }
}
EOF

message "Creating startup script at $vesselBash"

cat > $vesselJson <<jsonfile
{
  "interfaces": {},

  "ssl": $ssl,

  "pipedProviders": [],

  "security": {
    "strategy": "@signalk/sk-simple-token-security"
  }
}
jsonfile

cat > $packageJson <<EOF
{
  "name": "signalk-server-config",
  "version": "0.0.1",
  "description":
    "This file is here to track your plugin and webapp installs.",
  "repository": {},
  "license": "Apache-2.0"
}
EOF

if [ $EUID == 0 -a $noSystemCtl == 0 ]; then
    group_full=$(getent group $SUDO_GID)
    group="$( cut -d ':' -f 1 <<< "$group_full" )"
    for f in "$vesselJson $vesselDefaults $vesselBash $configDirectory $packageJson"
    do
      chown $SUDO_USER $f
      chgrp $group $f 
    done

    cat > $systemd <<systemdfile
[Service]
ExecStart=$vesselBash
Restart=always
StandardOutput=syslog
StandardError=syslog
WorkingDirectory=$configDirectory
User=$SUDO_USER
Environment=EXTERNALPORT=$primaryPort
[Install]
WantedBy=multi-user.target
systemdfile

    chmod 755 $systemd

    if [ "$secondaryPort" != "" ]; then
        secondListen="ListenStream=$secondaryPort"
    fi

    cat > $socket <<socket
[Socket]
ListenStream=$primaryPort
$secondListen

[Install]
WantedBy=sockets.target
socket

    chmod 755 $socket

    message "A reboot is recommended"

    systemctl daemon-reload
    systemctl enable signalk.service
    systemctl enable signalk.socket
fi

