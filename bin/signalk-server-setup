#!/usr/bin/env node

const spawn = require('child_process').spawn
const clear = require('clear')
const figlet = require('figlet')
const chalk = require('chalk')
const inquirer = require('inquirer')
const fs = require('fs')
const path = require('path')
const _ = require('lodash')
const Listr = require('listr');
const uuidv4 = require('uuid/v4')

const settingsFile = 'settings.json'
const defaultsFile = 'defaults.json'
const startupFile = 'signalk-server'
const packageFile = 'package.json'

//FIXME
const hasSystemctl = true //spawn('sh', ['-c', 'which systemctl'])
const euid = 0
const thisDirName = '/tmp/crap'

clear()
console.log(
  chalk.blue(
    figlet.textSync('Signal K', { horizontalLayout: 'full' })
  )
)


if ( euid > 0 ) {
  if ( hasSystemctl ) {
    console.log()
    console.log('Please run as root if you want this server configuration to run at every startup, type: "sudo signalk-server-setup"')
    console.log()

    inquirer.prompt([
      {
        name: 'notAsRoot',
        type: 'confirm',
        message: 'Are you sure you want to continue',
        default: false
      }]).then(answers => {
        if ( answers.notAsRoot == false ) {
          process.exit(1)
        } else {
          promptForConfigDir(`${process.env.HOME}/.signalk`)
        }
      })
  } else {
    promptForConfigDir(`${process.env.HOME}/.signalk`)
  }
} else {
  console.log(`\nYOU ARE LOGGED IN AS ${process.env.SUDO_USER} AND THE SERVER WILL BE STARTED AS THIS USER\n`)
  //promptForConfigDir(`${process.env.SUDO_USER}/.signalk`)
  promptForConfigDir(`${process.env.HOME}/.signalk`)
}

function promptForConfigDir(defaultLocation) {
  inquirer.prompt([
    {
      name: 'configDirectory',
      type: 'input',
      message: 'Enter the location to store server configuration:',
      default: defaultLocation,
      validate: (input) => {
        if ( input.length > 0 ) {
          return true
        } else {
          return 'Please enter the location to store server configuration.'
        }
      }
    }
  ]).then(answers => {
    let configDirectory = answers.configDirectory
    if ( fs.existsSync(path.join(configDirectory, settingsFile)) ) {
      inquirer.prompt([
        {
          name: 'updateExisting',
          type: 'list',
          message: 'Do you want to update the existing configuration or start from scratch',
          choices: ['Update', 'Start from scratch'],
        }]).then(answers => {
          promptForVesselName(configDirectory,
                              answers.updateExisting == 'Update')
        })
    } else {
      promptForVesselName(configDirectory, false)
    }
  })
}

function promptForVesselName(configDirectory, updateExisting) {

  let settingsLocation = path.join(configDirectory, settingsFile)
  let defaultsLocation = path.join(configDirectory, defaultsFile)
  let startupLocation = path.join(configDirectory, startupFile)
  let packageLocation = path.join(configDirectory, packageFile)
  let settings = {
    "interfaces": {},
    "ssl": false,
    "pipedProviders": [],
    "security": {
      "strategy": "./tokensecurity"
    }
  }
  let defaults = {
    "vessels": {
      "self": {
      }
    }
  }
  let packageJson = {
    "name": "signalk-server-config",
    "version": "0.0.1",
    "description":
    "This file is here to track your plugin and webapp installs.",
    "repository": {},
    "license": "Apache-2.0"
  }

  if ( !fs.existsSync(configDirectory) ) {
    fs.mkdirSync(configDirectory)
  }

  if ( updateExisting ) {
    settings = JSON.parse(fs.readFileSync(settingsLocation))
    if ( fs.existsSync(defaultsLocation) ) {
      defaults = JSON.parse(fs.readFileSync(defaultsLocation))
    }
    if ( fs.existsSync(packageLocation) ) {
      packageJson = JSON.parse(fs.readFileSync(packageLocation))
    }
  }

  inquirer.prompt([
    {
      name: 'vesselName',
      type: 'input',
      message: 'Enter your vessel name:',
      default: _.get(defaults, 'vessels.self.name'),
      validate: (input) => {
        if ( input.length > 0 ) {
          return true
        } else {
          return 'Please enter your vessel name.'
        }
      }
    },
    {
      name: 'mmsi',
      type: 'input',
      message: 'Enter your mmsi if you have one:',
      default: _.get(defaults, 'vessels.self.mmsi')
    }
  ]).then(answers => {
    let mmsi = answers.mmsi
    let vesselName = answers.vesselName

    var questions = []
    if ( euid == 0 ) {
      console.log("\nThe Signal K default port is 3000\nPort 80 does not require \":3000\" in the browser and app interfaces\n")
      questions.push({
        name: 'usePort80',
        type: 'confirm',
        message: 'Do you want to use port 80?',
        default: false
      })
    }
    questions.push({
      name: 'enableSSL',
      type: 'confirm',
      message: 'Do you want to enable SSL?',
      default: false
    })
    inquirer.prompt(questions).then(answers => {
      
      let tasks = [
        {
          title: `Creating your server defaults at ${defaultsLocation}`,
          task: () => {
            if ( !mmsi || mmsi.length == 0 ) {
              if ( !defaults.vessels.self.uuid ) {
                defaults.vessels.self.uuid = 'urn:mrn:signalk:uuid:' + uuidv4()
              }
              delete defaults.vessels.self.mmsi
            } else {
              defaults.vessels.self.mmsi = mmsi
              delete defaults.vessels.self.uuid
            }
            defaults.vessels.self.name = vesselName
            fs.writeFileSync(defaultsLocation, JSON.stringify(defaults, null, 2))
          }
        },
        {
          title: `Creating your server settings at ${settingsLocation}`,
          task: () => {
            settings.ssl = answers.enableSSL
            fs.writeFileSync(settingsLocation, JSON.stringify(settings, null, 2))
          }
        },
        {
          title: 'Creating package.json',
          task: () => {
            fs.writeFileSync(packageLocation, JSON.stringify(packageJson, null, 2))
          }
        },
        {
          title: `Creating your server startup script at ${startupLocation}`,
          task: () => {
            if ( !updateExisting || !fs.existsSync(startupLocation) ) {
              let script = `#!/bin/sh\n${thisDirName}/signalk-server -c ${configDirectory} \$*`
              fs.writeFileSync(startupLocation, script)
              //FIXME: make executable
            }
          }
        }
      ]

      if ( euid == 0 && hasSystemctl ) {
        tasks.push({
          title: `Setting up your server to start Signal K when booting up `,
          task: () => {}
        })
      }

      new Listr(tasks).run()
    })
  })
  
}
